name: CMake

on: [push, pull_request]
  
jobs:
  build-googletest:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        BUILD_TYPE: [Debug, Release]
        #container: ['debian:stretch']  
        
    env:
      BUILD_TYPE: ${{matrix.BUILD_TYPE}}
      ARTIFACT: DESKTOP_LINUX64@GTest@1.8.0.5dadbab@GNU_9.3.0
                #D:\repo\DESKTOP_WIN64\GTest\1.8.0.5dadbab\MSVC_19.28.29336.0
                
    #container: ${{matrix.container}}  #https://www.edwardthomson.com/blog/github_actions_19_downloading_artifacts.html
    #https://stackoverflow.com/questions/60735334/github-continuous-integration-cmake-c
    
    steps:
    - name: First, Checkout googletest source
      uses: actions/checkout@v2 
      
    - name: Then, Checkout Onbings Docker file into project tree
      uses: actions/checkout@v2
      with:
        repository: onbings/docker
        path: docker           

    #- name: Build env image
    #  run: docker build --target=env --tag project:env -f docker/DebianStretchBuilder.dockerfile . 
    #- name: Build devel image
    #  run: docker build --target=devel --tag project:devel -f docker/DebianStretchBuilder.dockerfile . 
    - name: Build build image
      run: docker build --target=build --tag project:build -f docker/DebianStretchBuilder.dockerfile . 
      #docker run --rm --init -t --name test project:build cmake --build build --target test
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build/$BUILD_TYPE

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build//${{env.BUILD_TYPE}}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      #un: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      run: docker run --rm --init -t --name test project:build cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
   
    - name: Debug Docker with a multiline script
      run: |
        docker run --rm --init -t --name test project:build pwd
        docker run --rm --init -t --name test project:build ls -al
        docker run --rm --init -t --name test project:build uname -a
        docker run --rm --init -t --name test project:build uname
        
    - name: Build
      working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - name: Install
      working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --install . --config $BUILD_TYPE --prefix ${{github.workspace}}/build/install    
    
    - name: Debug with a multiline script
      run: |
        pwd
        ls -al
        uname -a
        uname
    #    ls -al ${{github.workspace}}/build/install
          
    - name: Upload Artifact on GitHub
      uses: actions/upload-artifact@v2
      with: 
          name: ${{env.ARTIFACT}}
          path: build/install
